#!/usr/bin/env sh

set -ex

cmd=$1
component=$2
environment=$3

cd "./components/${component}/"

terraform workspace select $environment &
wait $!

case $component in
        "networking")
                #
                # Wait, why is this needed?
                #
                # Good you asked. I'll let terraform asnwer:
                #
                # Error: Invalid for_each argument
                #
                #  117:   for_each = data.aws_subnet_ids.public.ids
                #
                # The "for_each" value depends on resource attributes that cannot be determined
                # until apply, so Terraform cannot predict how many instances will be created.
                # To work around this, use the -target argument to first apply only the
                # resources that the for_each depends on.
                #
		terraform $cmd \
		-var-file="vars/${environment}.tfvars" \
		-target="module.networking.aws_vpc.nubecita" \
		-target="module.networking.aws_subnet.public" \
		-target="module.networking.aws_subnet.private" \
		-target="module.networking.aws_route_table.public" \
		-target="module.networking.aws_internet_gateway.igw" &
                wait $!
                ;;
        "eks")
                ;;
        *)
                echo "Unknown component ${component}"
                exit 1
                ;;
esac

terraform ${cmd} -var="environment=${environment}" -var-file="vars/${environment}.tfvars"




# function runTerraform {
#         local environment=$1
#         local cmd=$2
#         local component=$3

#         terraform $cmd -var="environment=${environment}" -var-file="vars/${environment}.tfvars"
# }
